# -*- coding: utf-8 -*-
"""Projeto Alura

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TkpEF1GQReSmbCzHFOd8SFDnzYmLjfwu

[#Instalação SDKs
"""

!pip install -q -U google.generativeai
!pip install speechrecognition
!pip install pydub

import google.generativeai as genai
import speech_recognition as sr
from pydub import AudioSegment

"""# Configurar a API Gemini"""

genai.configure(api_key='YOUR API key')
model = genai.GenerativeModel('gemini-pro')

"""#Lista de Modelos"""

for m in genai.list_models():
  if 'generateContent' in m.supported_generation_methods:
    print(m.name)

"""# Função para transcrever o áudio

"""

def transcrever_audio(audio_file):
  r = sr.Recognizer()
  with sr.AudioFile(audio_file) as source:
    audio_data = r.record(source)
  try:
    text = r.recognize_google(audio_data, language='en-US')
    return text
  except:
    return "Erro na transcrição do áudio."

"""# Função para analisar a transcrição

"""

def analisar_ingles(texto, candidato):
  prompt = f"""
  Você é um especialista em avaliação de proficiência em inglês,
  analisando a transcrição de áudio de uma entrevista.

  Por favor, avalie o nível de proficiência do candidato em inglês,
  baseando-se principalmente nos critérios de pontuação do TOEFL para
  Listening e Speaking. A avaliação de Reading e Writing será limitada,
  pois se baseia apenas na transcrição do áudio.

  **Transcrição da Entrevista:**

  {texto}

  Sua resposta deve seguir este formato EXATAMENTE:

  Candidato: {candidato}
  Idioma: Inglês
  Nível de Proficiência estimada: (número entre 0 e 120)
  Listening: (número entre 0 e 30)
  Speaking: (número entre 0 e 30)
  Reading: (número entre 0 e 30) - Avaliação limitada
  Writing: (número entre 0 e 30) - Avaliação limitada
  Pontos Positivos: (liste os pontos fortes do candidato em inglês)
  Pontos a Melhorar: (liste os pontos fracos do candidato em inglês)
  Recomendação: (se a pontuação for maior que 90, retorne 'Candidato {candidato} tem requisitos para a vaga'. Se a pontuação for menor que 90, retorne 'Candidato {candidato} NÃO tem requisitos para a vaga')
  """

  try:
    completion = genai.generate_text(
        model='models/gemini-pro',
        prompt=prompt,
        temperature=0.7,
        max_output_tokens=500
    )
    return completion.text
  except Exception as e:
    print(f"Erro ao chamar a API Gemini: {e}")
    return "Erro na análise."

"""# Interface do chatbot

"""

candidato = input("Candidato: ")
audio_file = input("Informe o caminho do arquivo de áudio: ")

"""# Converter o áudio para o formato WAV se necessário

"""

if not audio_file.lower().endswith('.wav'):
  sound = AudioSegment.from_file(audio_file)
  audio_file = audio_file.rsplit('.', 1)[0] + '.wav'
  sound.export(audio_file, format="wav")

"""# Transcrever e analisar o áudio"""

texto_transcrito = transcrever_audio(audio_file)
analise = analisar_ingles(texto_transcrito, candidato)

"""# Imprimir a análise

"""

print(analise)